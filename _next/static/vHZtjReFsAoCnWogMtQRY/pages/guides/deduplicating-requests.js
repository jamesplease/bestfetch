(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"1KBa":function(e,t,n){"use strict";function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}var r=n("Ff2n"),s=n("q1tI"),i=n.n(s),a=n("YFqc"),l=n.n(a),u=i.a.createElement;t.a=function(e){var t=e.href,n=Object(r.a)(e,["href"]);return u(l.a,o({href:t,as:"".concat("/bestfetch").concat(t)},n))}},"4mpA":function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/deduplicating-requests",function(){return n("SQy0")}])},Ff2n:function(e,t,n){"use strict";function o(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,"a",(function(){return o}))},SQy0:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return u}));var o=n("q1tI"),r=n.n(o),s=n("10ji"),i=n.n(s),a=n("1KBa"),l=r.a.createElement;function u(){return l("div",{className:"page"},l("h1",null,"Deduplicating Requests"),l("p",null,"bestfetch automatically prevents multiple identical requests from being made at the same time. It will batch all identical requests into a single request and then reuse the response."),l("p",null,"This is best understood with an example. Consider the following fetch code:"),l(i.a,{language:"js",inline:!1,value:"fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(res => res.json())\n  .then(data => {\n    console.log('First request received the todo:', data);\n  });\n\nfetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(res => res.json())\n  .then(data => {\n    console.log('Second request received the todo:', data);\n  });"}),l("p",null,"This code makes two requests to the same exact endpoint, and, accordingly, two network requests are made. You can verify this by running those code snippets in your browser's developer tools."),l("p",null,"However, these requests are targeting the same exact endpoint, so it would be more efficient to make just one network request. Run the following code in your browser's developer tools to see that only a single request is made:"),l(i.a,{language:"js",inline:!1,value:"bestfetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(res => {\n    console.log('First request received the todo:', res.data);\n  });\n\n// This request will \"piggy-back\" on the previous one;\n// a new network request is not made.\nbestfetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(res => {\n    console.log('Second request received the todo:', res.data);\n  });"}),l("h2",null,"When is This Useful?"),l("p",null,"The example code provided above may seem contrived. When would you ever make two requests back-to-back?"),l("p",null,"Consider an application that lets a user choose their country, where the list of countries is pulled from an API. You might choose to create a dropdown component that is responsible for fetching its own list of countries."),l("p",null,"If you only have one of these dropdowns on the page at a time, then there is no issue. But if you were to render two of these dropdowns at the same time, then they would each would make a request to fetch the same list of countries, which is inefficient."),l("p",null,"One solution to this problem is to hoist the call to fetch the countries outside of the dropdown, and then pass the data into the components. Sometimes, this solution is appropriate."),l("p",null,"Other times, you may not wish to, or you may be unable to, move the HTTP request. Using bestfetch allows you to keep the request in the component without worrying about how many instances of the component are on the page at one time."),l("h2",null,"Disabling Deduplication"),l("p",null,"Pass ",l("code",null,"dedupe: false")," when calling ",l("code",null,"bestfetch")," to disable request deduplication for a particular request."),l(i.a,{language:"js",inline:!1,value:"bestfetch('/api/books/2', { dedupe: false })\n  .then(res => {\n    console.log('Received the book:', res);\n  });"}),l("h2",null,"Learn More"),l("p",null,"To learn more about how this algorithm works, and also how you can change its behavior, check out the"," ",l(a.a,{href:"/guides/identical-requests"},l("a",null,"Identical Requests"))," ","guide."))}},YFqc:function(e,t,n){e.exports=n("cTJO")},cTJO:function(e,t,n){"use strict";var o=n("lwsE"),r=n("W8MJ"),s=n("a1gu"),i=n("Nsbk"),a=n("7W2i"),l=n("TqRt"),u=n("284h");t.__esModule=!0,t.default=void 0;var c,h=u(n("q1tI")),p=n("QmWs"),f=n("g/15"),d=l(n("nOHt"));function v(e){return e&&"object"===typeof e?(0,f.formatWithValidation)(e):e}var m=new Map,w=window.IntersectionObserver,g={};function y(){return c||(w?c=new w((function(e){e.forEach((function(e){if(m.has(e.target)){var t=m.get(e.target);(e.isIntersecting||e.intersectionRatio>0)&&(c.unobserve(e.target),m.delete(e.target),t())}}))}),{rootMargin:"200px"}):void 0)}var b=function(e){function t(e){var n;return o(this,t),(n=s(this,i(t).call(this,e))).p=void 0,n.cleanUpListeners=function(){},n.formatUrls=function(e){var t=null,n=null,o=null;return function(r,s){if(o&&r===t&&s===n)return o;var i=e(r,s);return t=r,n=s,o=i,i}}((function(e,t){return{href:v(e),as:t?v(t):t}})),n.linkClicked=function(e){var t=e.currentTarget,o=t.nodeName,r=t.target;if("A"!==o||!(r&&"_self"!==r||e.metaKey||e.ctrlKey||e.shiftKey||e.nativeEvent&&2===e.nativeEvent.which)){var s=n.formatUrls(n.props.href,n.props.as),i=s.href,a=s.as;if(function(e){var t=(0,p.parse)(e,!1,!0),n=(0,p.parse)((0,f.getLocationOrigin)(),!1,!0);return!t.host||t.protocol===n.protocol&&t.host===n.host}(i)){var l=window.location.pathname;i=(0,p.resolve)(l,i),a=a?(0,p.resolve)(l,a):i,e.preventDefault();var u=n.props.scroll;null==u&&(u=a.indexOf("#")<0),d.default[n.props.replace?"replace":"push"](i,a,{shallow:n.props.shallow}).then((function(e){e&&u&&(window.scrollTo(0,0),document.body.focus())}))}}},n.p=!1!==e.prefetch,n}return a(t,e),r(t,[{key:"componentWillUnmount",value:function(){this.cleanUpListeners()}},{key:"getPaths",value:function(){var e=window.location.pathname,t=this.formatUrls(this.props.href,this.props.as),n=t.href,o=t.as,r=(0,p.resolve)(e,n);return[r,o?(0,p.resolve)(e,o):r]}},{key:"handleRef",value:function(e){var t=this;this.p&&w&&e&&e.tagName&&(this.cleanUpListeners(),g[this.getPaths().join("%")]||(this.cleanUpListeners=function(e,t){var n=y();return n?(n.observe(e),m.set(e,t),function(){try{n.unobserve(e)}catch(t){console.error(t)}m.delete(e)}):function(){}}(e,(function(){t.prefetch()}))))}},{key:"prefetch",value:function(e){if(this.p){var t=this.getPaths();d.default.prefetch(t[0],t[1],e).catch((function(e){0})),g[t.join("%")]=!0}}},{key:"render",value:function(){var e=this,t=this.props.children,n=this.formatUrls(this.props.href,this.props.as),o=n.href,r=n.as;"string"===typeof t&&(t=h.default.createElement("a",null,t));var s=h.Children.only(t),i={ref:function(t){e.handleRef(t),s&&"object"===typeof s&&s.ref&&("function"===typeof s.ref?s.ref(t):"object"===typeof s.ref&&(s.ref.current=t))},onMouseEnter:function(t){s.props&&"function"===typeof s.props.onMouseEnter&&s.props.onMouseEnter(t),e.prefetch({priority:!0})},onClick:function(t){s.props&&"function"===typeof s.props.onClick&&s.props.onClick(t),t.defaultPrevented||e.linkClicked(t)}};return!this.props.passHref&&("a"!==s.type||"href"in s.props)||(i.href=r||o),h.default.cloneElement(s,i)}}]),t}(h.Component);t.default=b}},[["4mpA",0,1,2,3]]]);