{"version":3,"file":"static/webpack/static/development/pages/guides/identical-requests.js.62992622bfe9d1182ea1.hot-update.js","sources":["webpack:///./pages/guides/identical-requests.js"],"sourcesContent":["import Lowlight from 'react-lowlight';\n\nexport default function DeduplicatingRequests() {\n  return (\n    <div className=\"page\">\n      <h1>Identical Requests</h1>\n      <p>\n        bestfetch's request deduplication and response caching features work by\n        determining which requests are <b>identical</b>. This guide explains\n        when requests are identical, and it also covers how you can change this\n        behavior.\n      </p>\n      <h2>What Makes Two Request Identical?</h2>\n      <p>\n        This library looks at the following pieces of information about a\n        request:\n      </p>\n      <ul>\n        <li>The URL</li>\n        <li>The request body</li>\n        <li>\n          The request method (i.e.; <code>GET</code>)\n        </li>\n        <li>\n          The <code>responseType</code>\n        </li>\n      </ul>\n      <p>\n        bestfetch combines these pieces of information into a string called a{' '}\n        <code>requestKey</code>. Requests with the same <code>requestKey</code>{' '}\n        are identical.\n      </p>\n      <h2></h2>\n      <div className=\"advanced\">\n        <span className=\"emoji\">üíÅ‚Äç‚ôÄÔ∏è</span> <b>Heads up!</b> This is an advanced\n        API that very few applications should ever need to use. Be careful if\n        you decide to use it in your app.\n      </div>\n      <p>\n        In rare situations, you may wish to have control over when two requests\n        are considered to be identical. You can do this by specifying a{' '}\n        <code>requestKey</code> when calling <code>bestfetch</code>. A{' '}\n        <code>requestKey</code> is a string that bestfetch uses to determine\n        when two requests are identical.\n      </p>\n      <p>\n        When two requests have the same key, then they are deduped.\n        Additionally, the request key is used to determine when to pull from the\n        cache.\n      </p>\n      <p>\n        By default, a <code>requestKey</code> is generated for you, but you may\n        pass your own to override this behavior.\n      </p>\n      <Lowlight\n        language=\"js\"\n        inline={false}\n        value={`bestfetch('/api/books/2', { requestKey: 'my-custom-key' })\n  .then(res => {\n    console.log('Received the book:', res);\n  });`}\n      />\n    </div>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;;A","sourceRoot":""}