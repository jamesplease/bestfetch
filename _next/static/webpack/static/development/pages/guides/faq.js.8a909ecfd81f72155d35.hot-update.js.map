{"version":3,"file":"static/webpack/static/development/pages/guides/faq.js.8a909ecfd81f72155d35.hot-update.js","sources":["webpack:///./pages/guides/faq.js"],"sourcesContent":["export default function FAQ() {\n  return (\n    <div className=\"page\">\n      <h1>FAQ</h1>\n      <h2>\n        Sometimes <code>res.data</code> set to <code>null</code>, why is that?\n      </h2>\n      <p>\n        If the response cannot be parsed as the <code>responseType</code>, then{' '}\n        <code>res.data</code> will be <code>null</code>.\n      </p>\n      <p>There are two common situations for this:</p>\n      <ul>\n        <li>\n          The response body is an empty string when you specify{' '}\n          <code>responseType: 'json'</code>. Empty strings are not valid JSON.\n        </li>\n        <li>\n          The response body is an invalid JSON string when you specify{' '}\n          <code>responseType: 'json'</code> For example, some APIs will return\n          plain text messages in the response body when there are errors, like\n          the word \"Error\", rather than valid JSON.\n        </li>\n      </ul>\n      <p>\n        To resolve this, you can use the <code>responseType</code> option to\n        have greater control over the parsing of the response body from the\n        server.\n      </p>\n\n      <h2>\n        Why is <code>responseType</code> even an option?\n      </h2>\n      <p>\n        This option exists because of the inner workings of the{' '}\n        <code>fetch</code> API.\n      </p>\n      <p>\n        The argument that is passed to the <code>.then()</code> callback of a{' '}\n        <code>fetch()</code> call is a{' '}\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\">\n          Response object\n        </a>\n        . The body of a Response object can only be read a single time, because\n        it is a{' '}\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\">\n          ReadableStream\n        </a>\n        .\n      </p>\n      <p>\n        For bestfetch to reuse a response, it must pass the result of a single\n        request to many \"consumers,\" which are each of the individual calls to\n        bestfetch.\n      </p>\n      <p>\n        If more than one \"consumer\" tried to read the body, then an error would\n        be thrown. To get around this problem, bestfetch reads the body for you\n        – one time – and passes that result to each consumer.\n      </p>\n\n      <h2>Is the data duplicated?</h2>\n      <p>\n        Although you receive a new <code>Response</code> object with every call\n        to <code>bestfetch</code>, the body will be read, so the response's body\n        stream will be empty. In addition, the `data` property between every\n        <code>response</code> is shared. Accordingly, the data returned by the\n        server is never duplicated.\n      </p>\n      <p>\n        This is an optimization that allows <code>bestfetch</code> to be used in\n        applications that fetch large payloads.\n      </p>\n    </div>\n  );\n}\n"],"mappingssourceRoot":""}