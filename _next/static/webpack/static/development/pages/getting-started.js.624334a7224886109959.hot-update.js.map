{"version":3,"file":"static/webpack/static/development/pages/getting-started.js.624334a7224886109959.hot-update.js","sources":["webpack:///./pages/getting-started.js"],"sourcesContent":["import Lowlight from 'react-lowlight';\nimport Link from 'next/link';\n\nexport default function GettingStarted() {\n  return (\n    <div className=\"page\">\n      <h1>Getting Started</h1>\n      <p>\n        bestfetch is a lightweight HTTP request library that improves your\n        application's performance by minimizing the number of requests that go\n        over the network.\n      </p>\n      <h2>Installation</h2>\n      <p>\n        Install using <a href=\"https://npmjs.com\">npm</a>:\n      </p>\n      <code className=\"codeBlock\">npm install bestfetch</code>\n      <p>\n        or <a href=\"https://yarnpkg.com\">yarn</a>:\n      </p>\n      <code className=\"codeBlock\">yarn add bestfetch</code>\n      <h2>Basic Usage</h2>\n      <p>\n        Get started by importing the <code>bestfetch</code> function. The\n        following example demonstrates importing it using the{' '}\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">\n          ES2015 module syntax\n        </a>\n        .\n      </p>\n      <Lowlight\n        language=\"js\"\n        inline={false}\n        value={`import { bestfetch } from 'bestfetch';`}\n      />\n      <p>\n        Use this function to make requests. In the following example, a request\n        is made to fetch a todo item from an API.\n      </p>\n      <div className=\"advanced\">\n        <span className=\"emoji\">üíÅ‚Äç‚ôÄÔ∏è</span> <b>Heads up!</b> You can copy and\n        paste the following code snippet into your browser's developer tools to\n        try it out!\n      </div>\n      <Lowlight\n        language=\"js\"\n        inline={false}\n        value={`bestfetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(res => {\n    console.log('Got some data', res.data);\n  });`}\n      />\n      <p>\n        If you copy the above code you can paste and run it your browser's\n        developer tools. Run it several times and you'll see that only a single\n        network request is made; subsequent requests hit the cache and resolve\n        immediately.\n      </p>\n      <p>\n        If you're familiar with <code>fetch</code>, you may have noticed that\n        we're not calling <code>.json()</code>\n        on the response. Typical <code>fetch</code> usage would look like the\n        following:\n      </p>\n      <Lowlight\n        language=\"js\"\n        inline={false}\n        value={`fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(res => res.json())\n  .then(data => {\n    console.log('Got some data', data);\n  });`}\n      />\n      <p>\n        When you call <code>.json()</code> you're reading the response body from\n        the server and parsing it as JSON. When you use bestfetch, the request\n        body is read and parsed as JSON automatically for you (although this{' '}\n        <Link href=\"/guides/other-response-types\">\n          <a>can be configured</a>\n        </Link>\n        ).\n      </p>\n      <h2>Next Steps</h2>\n      <p>\n        Now that you've seen the basic usage of bestfetch, read the{' '}\n        <Link href=\"/guides/making-requests\">\n          <a>Making Requests</a>\n        </Link>{' '}\n        guide to learn more.\n      </p>\n    </div>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;A","sourceRoot":""}