{"version":3,"file":"static/webpack/static/development/pages/getting-started.js.df169b3894971c58de84.hot-update.js","sources":["webpack:///./pages/getting-started.js"],"sourcesContent":["import Link from 'next/link';\n\nexport default function GettingStarted() {\n  return (\n    <div className=\"page\">\n      <h1>Getting Started</h1>\n      <p>\n        bestfetch is a lightweight HTTP library that improves your application's\n        performance by minimizing the number of requests that hit the server.\n      </p>\n      <h2>Installation</h2>\n      <p>\n        Install using <a href=\"https://npmjs.com\">npm</a>:\n      </p>\n      <code className=\"codeBlock\">npm install bestfetch</code>\n      <p>\n        or <a href=\"https://yarnpkg.com\">yarn</a>:\n      </p>\n      <code className=\"codeBlock\">yarn add bestfetch</code>\n      <h2>\n        Using <code>fetch()</code> Guides\n      </h2>\n      <p>\n        Because bestfetch is such a lightweight wrapper around fetch, you'll\n        benefit from having knowledge of that API. If you're new to fetch, I\n        recommend reading the{' '}\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">\n          Using Fetch guide on MDN\n        </a>\n        . It's a great introduction.\n      </p>\n      <h2>Basic Usage</h2>\n      <p>\n        Get started by importing the <code>bestfetch</code> method from the\n        library. The following example demonstrates using bestfetch with the{' '}\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">\n          ES2015 module syntax\n        </a>\n        .\n      </p>\n      <code className=\"codeBlock\">\n        {`import { bestfetch } from 'bestfetch';`}\n      </code>\n      <div className=\"advanced\">\n        <span className=\"emoji\">üíÅ‚Äç‚ôÄÔ∏è</span> <b>Heads up!</b> You can copy and\n        paste these code snippets into your browser's developer tools to try\n        them out!\n      </div>\n      <code className=\"codeBlock\">\n        {`import { bestfetch } from 'bestfetch';\n\nbestfetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(res => {\n    console.log('Got some data', res.data);\n  });\n\n// Additional identical requests are deduped. Nifty.\nbestfetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(res => {\n    console.log('Got some data', res.data);\n  });`}\n      </code>\n      <p>\n        If you copy the above code and run it in your browser's developer tools,\n        you can observe that only a single network request is made.\n      </p>\n      <p>\n        If you're familiar with <code>fetch</code>, you may have noticed that\n        we're not calling <code>.json()</code>\n        on the response. Typical <code>fetch</code> usage would look like the\n        following:\n      </p>\n      <code className=\"codeBlock\">\n        {`fetch('https://jsonplaceholder.typicode.com/todos/1')\n  .then(res => res.json())\n  .then(data => {\n    console.log('Got some data', data);\n  });`}\n      </code>\n      <p>\n        What you're doing when you call <code>.json()</code> is read the request\n        body, parsing it as a JSON string. When you use bestfetch, the request\n        body is read and parsed as JSON automatically for you.\n      </p>\n      <h2>Next Steps</h2>\n      <p>\n        Now that you've seen the basic usage of bestfetch, read the{' '}\n        <Link href=\"/guides/making-requests\">\n          <a>Making Requests</a>\n        </Link>{' '}\n        guide to learn more.\n      </p>\n    </div>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;A","sourceRoot":""}